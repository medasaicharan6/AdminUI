{"version":3,"sources":["components/columns.js","components/Pagination.js","components/BasicTable.js","components/AdminUi.js","App.js","reportWebVitals.js","index.js"],"names":["column","Header","Accessor","Pagination","Totalrows","setCurrentPage","currentpage","setHeadCheckbox","DeleteSelected","PageNumbers","i","Math","ceil","push","PageButtonClick","number","className","onClick","disabled","map","length","BasicTable","data","CheckboxChange","HeadCheckbox","HeadCheckboxChange","editData","DeleteClicked","useState","editableId","setEditableId","name","email","role","editFormData","setEditFormData","cellSpacing","type","id","checked","onChange","e","row","parseInt","select","column_row","target","slice","formValues","handleEdit","placeholder","required","value","preventDefault","fieldName","getAttribute","fieldValue","newFormdata","handleEditFormChange","obj","editedData","handleFormSubmit","AdminUi","setData","useEffect","load","a","fetch","response","json","query","setQuery","headers","searchdata","filter","some","header","toString","toUpperCase","indexOf","search","pageData","onInputChange","list","newData","findIndex","updatedData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e17c7a0.chunk.js","sourcesContent":["export const column = [\r\n    {\r\n        Header: \"Name\",\r\n        Accessor: \"name\"\r\n    },\r\n    {\r\n        Header: \"Email\",\r\n        Accessor:\"email\"\r\n    },\r\n    {\r\n        Header:\"Role\",\r\n        Accessor:\"role\"\r\n    },\r\n]","import React from 'react'\r\nimport './Pagination.css'\r\n\r\nexport const Pagination = ({Totalrows,setCurrentPage,currentpage,setHeadCheckbox,DeleteSelected}) => {\r\n    const PageNumbers = []\r\n    for (let i=1 ; i<=Math.ceil(Totalrows/10) ; i++){\r\n        PageNumbers.push(i)\r\n    }\r\n    const PageButtonClick=(number)=>{\r\n        setHeadCheckbox(false)\r\n        setCurrentPage(number)\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"button-container\">\r\n            <button className=\"Deleteall\" onClick={DeleteSelected}>Delete selected</button>\r\n            <div className=\"Page-button-container\">\r\n                <button className=\"Pagebutton\" onClick={()=>PageButtonClick(1)}>{\"<<\"}</button>\r\n                <button className=\"Pagebutton\" onClick={()=>PageButtonClick(currentpage-1)} disabled={currentpage===1}>{\"<\"}</button>\r\n                {PageNumbers.map(number=>(\r\n                    <button className=\"Pagebutton\" onClick={()=>PageButtonClick(number)}>{number}</button>\r\n                ))}\r\n                <button className=\"Pagebutton\" onClick={()=>PageButtonClick(currentpage+1)} disabled={currentpage===PageNumbers.length}>{\">\"}</button>\r\n                <button className=\"Pagebutton\" onClick={()=>PageButtonClick(PageNumbers.length)}>{\">>\"}</button>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport {column} from './columns'\r\nimport './BasicTable.css'\r\n\r\nexport const BasicTable = ({data,CheckboxChange,HeadCheckbox,HeadCheckboxChange,editData,DeleteClicked}) =>{\r\n    const [editableId,setEditableId]=useState(null)\r\n    const [editFormData,setEditFormData]=useState({\r\n        name:\"\",\r\n        email:\"\",\r\n        role:\"\"\r\n    })\r\n    const handleEditFormChange=(e)=>{\r\n        e.preventDefault();\r\n        const fieldName=e.target.getAttribute('name');\r\n        const fieldValue=e.target.value;\r\n\r\n        const newFormdata = {...editFormData}\r\n        newFormdata[fieldName]=fieldValue\r\n        setEditFormData(newFormdata)\r\n    }\r\n    const handleEdit=(e)=>{\r\n        let id = parseInt(e.target.id.slice(0,-2))\r\n        setEditableId(id)\r\n        const formValues={}\r\n        for (let row of data){\r\n            if (parseInt(row.id) ===id ){\r\n                formValues.name=row.name\r\n                formValues.role=row.role\r\n                formValues.email=row.email\r\n                break\r\n            }\r\n        }\r\n        setEditFormData(formValues)\r\n    }\r\n    const handleFormSubmit = (e)=>{\r\n        e.preventDefault()\r\n        let id = parseInt(e.target.id.slice(0,-2))\r\n        let obj={}\r\n        for (let row of data){\r\n            if (parseInt(row.id)===id){\r\n                obj={...row}\r\n                break\r\n            }\r\n        }\r\n        const editedData = {...obj, name:editFormData.name,role:editFormData.role,email:editFormData.email}\r\n        editData(editedData);\r\n        setEditableId(null)\r\n    }\r\n    return(\r\n        <form className=\"box\">\r\n            <table cellSpacing={0}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>{<input type='checkbox' id=\"MainCheckbox\" checked={HeadCheckbox} onChange={(e)=>HeadCheckboxChange(e)}/>}</th>\r\n                        {column.map(row=>( \r\n                            <th>{row.Header}</th>\r\n                        ))}\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.map(row=>{\r\n                        if (parseInt(editableId)!==parseInt(row.id)){\r\n                            return(\r\n                                <tr className={row.select===true? \"selected\":\"\"}>\r\n                                    <td>{<input id={row.id} type='checkbox' checked={row.select} onChange={(e)=>CheckboxChange(e)}/>}</td>\r\n                                    {column.map(column_row=>(\r\n                                        <td>{row[column_row.Accessor]}</td>\r\n                                    ))}\r\n                                    <td>\r\n                                        <div className=\"Actionsbox\">\r\n                                            <button id={row.id+\"Ed\"} className=\"actionbutton\" type=\"button\" onClick={(e)=>handleEdit(e)}>Edit</button>\r\n                                            <button id={row.id+\"Dl\"} onClick={(e)=>DeleteClicked(e)} type=\"button\">Delete</button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>)\r\n                        }\r\n                        else{\r\n                            return(\r\n                                <tr className={row.select===true? \"selected\":\"\"}>\r\n                                    <td>{<input id={row.id} type='checkbox' checked={row.select} onChange={(e)=>CheckboxChange(e)}/>}</td>\r\n                                    {column.map(column_row=>(\r\n                                        <td><input type=\"text\" placeholder={column_row.Accessor} required=\"required\" name={column_row.Accessor} value={editFormData[column_row.Accessor]} onChange={(e)=>handleEditFormChange(e)}/></td>\r\n                                    ))}\r\n                                    <td>\r\n                                        <div className=\"Actionsbox\">\r\n                                            <button id={row.id+\"SV\"} className=\"actionbutton\" type=\"button\" onClick={(e)=>handleFormSubmit(e)}>Save</button>\r\n                                            <button type=\"button\" onClick={()=>setEditableId(null)}>Cancel</button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>)\r\n                        }\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </form>\r\n    )\r\n}","import './AdminUi.css'\r\nimport React, { useState,useEffect } from 'react'\r\nimport { column } from './columns'\r\nimport { Pagination } from './Pagination'\r\nimport {BasicTable} from './BasicTable'\r\n\r\n\r\nexport const AdminUi=()=>{\r\n    const[data,setData]=useState([])\r\n    useEffect(() => {\r\n        const load=async()=>{\r\n            const response = await fetch(\"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\")\r\n            const data = await response.json();\r\n            for (let row of data){\r\n                row.select=false\r\n            }\r\n            setData(data)\r\n        }\r\n        load();\r\n    }, [])\r\n    const[currentpage,setCurrentPage]=useState(1)\r\n    const [query,setQuery] = useState(\"\")\r\n    const[HeadCheckbox,setHeadCheckbox]=useState(false)\r\n    const headers = []\r\n    for (let i of column){\r\n        headers.push(i.Accessor)\r\n    }\r\n    const search = ((data) => data.filter((row)=> headers.some(header=>row[header].toString().toUpperCase().indexOf(query.toUpperCase())>-1)))\r\n    const CheckboxChange=(e)=>{\r\n        setData(data.map(row=>{\r\n            if (parseInt(e.target.id) === parseInt(row.id)){\r\n                row.select=!row.select\r\n            }\r\n            return row\r\n        }))\r\n    }\r\n    const onInputChange = (e) =>{\r\n        setHeadCheckbox(false)\r\n        if (query===\"\"){\r\n            setCurrentPage(1)\r\n            setQuery(e.target.value)\r\n        }\r\n        else{\r\n            setCurrentPage(1)\r\n            setQuery(e.target.value)\r\n       }\r\n    }\r\n    const searchdata = search(data)\r\n    const pageData=searchdata.slice((currentpage*10)-10,currentpage*10)\r\n    const HeadCheckboxChange = (e) =>{\r\n        let checked = e.target.checked\r\n        setHeadCheckbox(!HeadCheckbox,pageData)\r\n        const list=[]\r\n        for (let row of pageData){\r\n            list.push(row.id)\r\n        }\r\n        setData(data.map(row=>{\r\n            if (list.indexOf(row.id)>-1){\r\n                row.select=checked\r\n            }\r\n            return row \r\n        }))\r\n    }\r\n    const editData=(editedData)=>{\r\n        const newData = [...data]\r\n        const index = data.findIndex(row=>parseInt(row.id)===parseInt(editedData.id))\r\n        newData[index]=editedData\r\n        setData(newData)\r\n    }\r\n    const DeleteClicked = (e)=>{\r\n        const newData = [...data]\r\n        const updatedData = newData.filter(row=>parseInt(row.id)!==parseInt(e.target.id))\r\n        setData(updatedData)\r\n    }\r\n    const DeleteSelected = ()=>{\r\n        const newData = [...data]\r\n        const updatedData = newData.filter(row=>row.select===false)\r\n        setData(updatedData)\r\n        setHeadCheckbox(false)\r\n    }\r\n    return (\r\n        <>\r\n            <input className='Searchbar' type='search' value={query} placeholder='Search by name, email or role' onChange= {(e)=>onInputChange(e)}/>\r\n            <BasicTable data={pageData} CheckboxChange={CheckboxChange} HeadCheckbox={HeadCheckbox} HeadCheckboxChange={HeadCheckboxChange} editData={editData} DeleteClicked={DeleteClicked}></BasicTable>\r\n            <Pagination Totalrows={searchdata.length} setCurrentPage={setCurrentPage} currentpage={currentpage} setHeadCheckbox={setHeadCheckbox} DeleteSelected={DeleteSelected}></Pagination>\r\n        </>\r\n    )}\r\n","import './App.css'\nimport {AdminUi} from './components/AdminUi'\nfunction App() {\n  return (\n    <div>\n      <AdminUi></AdminUi>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}